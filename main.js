(()=>{"use strict";var e={747:(e,t,n)=>{n.d(t,{Z:()=>v});var a=n(537),r=n.n(a),i=n(645),s=n.n(i),o=n(667),l=n.n(o),c=new URL(n(63),n.b),d=new URL(n(484),n.b),A=new URL(n(961),n.b),u=new URL(n(121),n.b),p=s()(r()),f=l()(c),h=l()(d),g=l()(A),m=l()(u);p.push([e.id,"@font-face {\n    font-family: 'major_snafuregular';\n    src: url("+f+") format('woff');\n    font-weight: normal;\n    font-style: normal;\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    background-color: black;\n    width: 100%;\n}\n\nh1 {\n    font-family: 'major_snafuregular';\n    color: greenyellow;\n    font-size: 60px;\n    text-align: center;\n}\n\n#playButton, #rotate {\n    cursor: pointer;\n    background-color: #f94c3a;\n    color: white;\n    font-size: 25px;\n    border: none;\n    width: 200px;\n    height: 50px;\n}\n\n#display {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    column-gap: 20px;\n}\n\n#aiBoard {\n    margin-right: 220px;\n}\n\n#aiBoard>.cell {\n    cursor: crosshair;\n}\n\n#info {\n    color: greenyellow;\n    text-align: center;\n    font-size: 20px;\n}\n\n#shipContainer {\n    display: none;\n    flex-direction: column;\n    width: 200px;\n    gap: 5px;\n}\n\n#ships {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    background-color: black;\n}\n\n#carrierContainerr>img {\n    cursor: grab;\n}\n\n.ship {\n    height: 40px;\n}\n\n#carrierContainer.vertical {\n    width: 200px;\n    height: 200px;\n}\n\n#battleshipContainer.vertical {\n    width: 200px;\n    height: 160px;\n}\n\n#destroyerContainer.vertical, #submarineContainer.vertical {\n    width: 200px;\n    height: 120px;\n}\n\n#patrolContainer.vertical {\n    width: 200px;\n    height: 80px;\n}\n\n.hide {\n    display: none;\n}\n\n.dragOver {\n    background-color: lightgrey;\n}\n\n.invalid {\n    background-color: lightcoral;\n}\n\n.rotate {\n    transform: rotate(90deg) translate(-40px);\n    transform-origin: bottom left;\n}\n\n.board {\n    display: none;\n    grid: repeat(10, 1fr) / repeat(10, 1fr);\n    width: 400px;\n    height: 400px;\n    background-image: url("+h+");\n}\n\n.cell {\n    border: 1px solid black;\n    position: relative;\n}\n\n.cell>img {\n    cursor: grab;\n    position: absolute;\n}\n\n.cell[data-value='-']:after {\n    position: absolute;\n    height: 36px;\n    content: url("+g+");\n    z-index: 0;\n}\n\n.cell[data-value='x']:after {\n    position: absolute;\n    height: 36px;\n    content: url("+m+");\n    z-index: 0;\n}","",{version:3,sources:["webpack://./src/stylesheet.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,2DAA2D;IAC3D,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,uBAAuB;IACvB,WAAW;AACf;;AAEA;IACI,iCAAiC;IACjC,kBAAkB;IAClB,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,yBAAyB;IACzB,YAAY;IACZ,eAAe;IACf,YAAY;IACZ,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,WAAW;IACX,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,QAAQ;AACZ;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,uBAAuB;AAC3B;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,yCAAyC;IACzC,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,uCAAuC;IACvC,YAAY;IACZ,aAAa;IACb,yDAAsC;AAC1C;;AAEA;IACI,uBAAuB;IACvB,kBAAkB;AACtB;;AAEA;IACI,YAAY;IACZ,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,gDAA8B;IAC9B,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,gDAA2B;IAC3B,UAAU;AACd",sourcesContent:["@font-face {\n    font-family: 'major_snafuregular';\n    src: url('./fonts/major_shift-webfont.woff') format('woff');\n    font-weight: normal;\n    font-style: normal;\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    background-color: black;\n    width: 100%;\n}\n\nh1 {\n    font-family: 'major_snafuregular';\n    color: greenyellow;\n    font-size: 60px;\n    text-align: center;\n}\n\n#playButton, #rotate {\n    cursor: pointer;\n    background-color: #f94c3a;\n    color: white;\n    font-size: 25px;\n    border: none;\n    width: 200px;\n    height: 50px;\n}\n\n#display {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    column-gap: 20px;\n}\n\n#aiBoard {\n    margin-right: 220px;\n}\n\n#aiBoard>.cell {\n    cursor: crosshair;\n}\n\n#info {\n    color: greenyellow;\n    text-align: center;\n    font-size: 20px;\n}\n\n#shipContainer {\n    display: none;\n    flex-direction: column;\n    width: 200px;\n    gap: 5px;\n}\n\n#ships {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    background-color: black;\n}\n\n#carrierContainerr>img {\n    cursor: grab;\n}\n\n.ship {\n    height: 40px;\n}\n\n#carrierContainer.vertical {\n    width: 200px;\n    height: 200px;\n}\n\n#battleshipContainer.vertical {\n    width: 200px;\n    height: 160px;\n}\n\n#destroyerContainer.vertical, #submarineContainer.vertical {\n    width: 200px;\n    height: 120px;\n}\n\n#patrolContainer.vertical {\n    width: 200px;\n    height: 80px;\n}\n\n.hide {\n    display: none;\n}\n\n.dragOver {\n    background-color: lightgrey;\n}\n\n.invalid {\n    background-color: lightcoral;\n}\n\n.rotate {\n    transform: rotate(90deg) translate(-40px);\n    transform-origin: bottom left;\n}\n\n.board {\n    display: none;\n    grid: repeat(10, 1fr) / repeat(10, 1fr);\n    width: 400px;\n    height: 400px;\n    background-image: url(./img/radar.png);\n}\n\n.cell {\n    border: 1px solid black;\n    position: relative;\n}\n\n.cell>img {\n    cursor: grab;\n    position: absolute;\n}\n\n.cell[data-value='-']:after {\n    position: absolute;\n    height: 36px;\n    content: url(./img/splash.png);\n    z-index: 0;\n}\n\n.cell[data-value='x']:after {\n    position: absolute;\n    height: 36px;\n    content: url(./img/hit.png);\n    z-index: 0;\n}"],sourceRoot:""}]);const v=p},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(a)for(var o=0;o<this.length;o++){var l=this[o][0];null!=l&&(s[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);a&&s[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(r," */"),s=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(s).concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var i={},s=[],o=0;o<e.length;o++){var l=e[o],c=a.base?l[0]+a.base:l[0],d=i[c]||0,A="".concat(c," ").concat(d);i[c]=d+1;var u=n(A),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var f=r(p,a);a.byIndex=o,t.splice(o,0,{identifier:A,updater:f,references:1})}s.push(A)}return s}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=a(e=e||[],r=r||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var o=n(i[s]);t[o].references--}for(var l=a(e,r),c=0;c<i.length;c++){var d=n(i[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=l}}},569:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,r&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},63:(e,t,n)=>{e.exports=n.p+"f1bb1cc9454becf1325e.woff"},121:(e,t,n)=>{e.exports=n.p+"02dfad0383e212ea949d.png"},484:(e,t,n)=>{e.exports=n.p+"b00462d1e911dc052743.png"},961:(e,t,n)=>{e.exports=n.p+"ed8509d1c470d5885fa8.png"}},t={};function n(a){var r=t[a];if(void 0!==r)return r.exports;var i=t[a]={id:a,exports:{}};return e[a](i,i.exports,n),i.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var a=t.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var e=n(379),t=n.n(e),a=n(795),r=n.n(a),i=n(569),s=n.n(i),o=n(565),l=n.n(o),c=n(216),d=n.n(c),A=n(589),u=n.n(A),p=n(747),f={};f.styleTagTransform=u(),f.setAttributes=l(),f.insert=s().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=d(),t()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;const h={pubsub:{},sub:function(e,t){this.pubsub[e]=this.pubsub[e]||[],this.pubsub[e].push(t)},unsub:function(e,t){if(this.pubsub[e])for(var n=0;n<this.pubsub[e].length;n++)if(this.pubsub[e][n]===t){this.pubsub[e].splice(n,1);break}},pub:function(e,t){this.pubsub[e]&&this.pubsub[e].forEach((function(e){e(t)}))}},g=n.p+"af2b4ba4dde756e89805.png",m=n.p+"2a2ef86d8d5773dfc480.png",v=n.p+"b8d8ed85f469b68d8980.png",C=n.p+"a9bac7263797a746e375.png",b=n.p+"da6941d83ca306b9302a.png";(()=>{const e=document.getElementById("playButton"),t=document.getElementById("info"),n=document.getElementById("playerBoard"),a=document.getElementById("aiBoard"),r=document.getElementById("shipContainer"),i=document.getElementById("ships"),s=document.getElementById("rotate");let o;e.addEventListener("click",(function(){(function(){for(;n.firstChild;)n.removeChild(n.firstChild);for(;a.firstChild;)a.removeChild(a.firstChild);t.textContent=""})(),e.style.display="none",h.pub("newGame")})),s.addEventListener("click",(function(){i.firstChild.classList.toggle("vertical"),i.firstChild.firstChild.classList.toggle("rotate"),u=!u,h.pub("rotateShip",i.firstChild.firstChild.id)})),h.sub("gameCreated",(function(t){e.style.display="none",r.style.display="flex",n.style.display="grid",a.style.display="grid",function(e){for(let t=0;t<10;t++)e.fleet.grid[t].forEach(((e,a)=>{let r=document.createElement("div");r.className="cell",r.dataset.x=t,r.dataset.y=a,r.dataset.value=e,r.addEventListener("dragenter",I),r.addEventListener("dragover",B),r.addEventListener("dragleave",E),r.addEventListener("drop",k),n.appendChild(r)}))}(t.p1),function(e){for(let t=0;t<10;t++)e.fleet.grid[t].forEach(((e,n)=>{let r=document.createElement("div");r.className="cell",r.dataset.x=t,r.dataset.y=n,r.dataset.value=0,a.appendChild(r),r.addEventListener("click",w)}))}(t.p2),function(e){const t=[g,m,C,v,b];let n=0;e.fleet.allShips.forEach((e=>{const a=document.createElement("div");a.id=e.name+"Container";const r=new Image;r.src=t[n],r.id=e.name,r.className="ship",r.draggable=!0,r.addEventListener("dragstart",p),r.addEventListener("dragend",f),a.appendChild(r),i.appendChild(a),n++}))}(t.p1)})),h.sub("missileStrike",(function(e){e[0].dataset.value=e[1]})),h.sub("strikeBack",(function(e){let t=e[1],a=e[2];[...n.children].forEach((n=>{n.dataset.x==t&&n.dataset.y==a&&("-"===e[0].fleet.grid[t][a]?n.dataset.value="-":n.dataset.value="x")}))})),h.sub("shipSunk",(function(e){"computer"===e.name?t.textContent=`You have sunk your opponent's ${e.shipName}.`:t.textContent=`Your ${e.shipName} has sunk.`})),h.sub("gameOver",(function(n){[...a.children].forEach((e=>e.removeEventListener("click",w))),t.textContent="computer"===n?"Game Over. Your opponent's fleet has sunk.":"Game Over. Your fleet has sunk.",e.style.display="block",a.style.marginRight="220px"}));let l,c,d,A,u=!1;function p(e){o=e.target.id,e.dataTransfer.setData("image",e.target.id),setTimeout((()=>{e.target.classList.add("hide")})),[...e.target.parentElement.parentElement.children].forEach((e=>{e.dataset.value===o&&(e.dataset.value=0)}))}function f(e){[...e.target.parentElement.children].forEach((e=>e.classList.remove("dragOver"))),[...e.target.parentElement.children].forEach((e=>e.classList.remove("hide"))),e.target.classList.remove("hide")}let x=[];function y(e){return 0==e.dataset.value}function I(e){if("carrier"===o){if(!1===u){if(!(e.target.dataset.y<6))return void e.target.classList.add("invalid");l=e.target.nextElementSibling,c=l.nextElementSibling,d=c.nextElementSibling,A=d.nextElementSibling,x=[e.target,l,c,d,A]}else if(!0===u){if(!(e.target.dataset.x<6))return void e.target.classList.add("invalid");{let t=[...e.target.parentElement.children],n=t.indexOf(e.target);l=t[n+10],c=t[n+20],d=t[n+30],A=t[n+40],x=[e.target,l,c,d,A]}}x!==[]&&x.every(y)?(e.preventDefault(),x.forEach((e=>{e.classList.add("dragOver")}))):e.target.classList.add("invalid")}else if("battleship"===o){if(!1===u){if(!(e.target.dataset.y<7))return void e.target.classList.add("invalid");l=e.target.nextElementSibling,c=l.nextElementSibling,d=c.nextElementSibling,x=[e.target,l,c,d]}else if(!0===u){if(!(e.target.dataset.x<7))return void e.target.classList.add("invalid");{let t=[...e.target.parentElement.children],n=t.indexOf(e.target);l=t[n+10],c=t[n+20],d=t[n+30],x=[e.target,l,c,d]}}x!==[]&&x.every(y)?(e.preventDefault(),x.forEach((e=>{e.classList.add("dragOver")}))):e.target.classList.add("invalid")}else if("destroyer"===o||"submarine"===o){if(!1===u){if(!(e.target.dataset.y<8))return void e.target.classList.add("invalid");l=e.target.nextElementSibling,c=l.nextElementSibling,x=[e.target,l,c]}else if(!0===u){if(!(e.target.dataset.x<8))return void e.target.classList.add("invalid");{let t=[...e.target.parentElement.children],n=t.indexOf(e.target);l=t[n+10],c=t[n+20],x=[e.target,l,c]}}x!==[]&&x.every(y)?(e.preventDefault(),x.forEach((e=>{e.classList.add("dragOver")}))):e.target.classList.add("invalid")}else if("patrol"===o){if(!1===u){if(!(e.target.dataset.y<9))return void e.target.classList.add("invalid");l=e.target.nextElementSibling,x=[e.target,l]}else if(!0===u){if(!(e.target.dataset.x<9))return void e.target.classList.add("invalid");{let t=[...e.target.parentElement.children],n=t.indexOf(e.target);l=t[n+10],x=[e.target,l]}}x!==[]&&x.every(y)?(e.preventDefault(),x.forEach((e=>{e.classList.add("dragOver")}))):e.target.classList.add("invalid")}}function B(e){I(e)}function E(e){[...e.target.parentElement.children].forEach((e=>e.classList.remove("dragOver"))),[...e.target.parentElement.children].forEach((e=>e.classList.remove("invalid")))}function k(e){[...e.target.parentElement.children].forEach((e=>e.classList.remove("dragOver"))),[...e.target.parentElement.children].forEach((e=>{e.dataset.value===o&&(e.dataset.value=0)}));const t=e.dataTransfer.getData("image"),n=document.getElementById(t);e.target.appendChild(n),n.classList.remove("hide"),x.forEach((e=>{e.dataset.value=t}));let s=document.getElementById(t+"Container");i.contains(s)&&i.removeChild(s),u=!1,h.pub("shipPlaced",e.target),i.hasChildNodes()||(r.style.display="none",a.style.marginRight=0)}function w(e){if(i.children.length>0)t.textContent="Place all of your ships before attacking the enemy.";else{t.textContent="";let n=e.target.dataset.x,a=e.target.dataset.y;h.pub("missileLaunched",[n,a,e.target]),e.target.removeEventListener("click",w)}}})();class x{isVertical=!1;isOperational=!0;isPlaced=!1;constructor(e,t){this.name=e,this.length=t,this.defense=this.buildShip()}buildShip(){let e=[];for(let t=0;t<this.length;t++)e.push("o");return e}hit(e){this.defense.splice(e,1,"x")}isSunk(){return!this.isOperational}}class y{isFleetOperational=!0;carrier=new x("carrier",5);battleship=new x("battleship",4);destroyer=new x("destroyer",3);submarine=new x("submarine",3);patrol=new x("patrol",2);allShips=[this.carrier,this.battleship,this.destroyer,this.submarine,this.patrol];grid=[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]];placeShip(e,t,n){let a,r=0;if(e.isVertical){a=[];for(let r=t;r<t+e.length;r++){let e=this.grid[r][n];a.push(e)}if(a.every(this.isZero)){let a=0;for(let r=t;r<t+e.length;r++)this.grid[r].fill(e.name+a,n,n+1),a++;e.isPlaced=!0}}else for(;r<e.length;r++)a=this.grid[t].slice(n,n+e.length),a.every(this.isZero)&&(this.grid[t].fill(e.name+r,n,++n),e.isPlaced=!0)}rotateShip(e){!1===e.isVertical?e.isVertical=!0:(ss,e.isVertical=!1)}isZero(e){return 0===e}receiveAttack(e,t,n){0===this.grid[t][n]?this.miss(t,n):(this.allShips.forEach((a=>{let r=this.grid[t][n].slice(0,-1),i=this.grid[t][n].slice(-1);a.name===r&&(a.hit(i),this.isSunk(e,a))})),this.grid[t][n]="x")}miss(e,t){this.grid[e][t]="-"}isSunk(e,t){if(!t.defense.includes("o")){let n=this.allShips.indexOf(t);this.allShips.splice(n,1);let a=e.name,r=t.name;h.pub("shipSunk",{name:a,shipName:r}),this.isFleetSunk(a)}}isFleetSunk(e){this.allShips.every((e=>!1===e.isOperational))&&(this.isFleetOperatioanl=!1,h.pub("gameOver",e))}}class I{constructor(e){this.name=e}fleet=new y;attack(e,t,n){e.fleet.receiveAttack(e,t,n)}aiAttack(e){let t=this.getCoordinates();0===e.fleet.grid[t[0]][t[1]]?e.fleet.receiveAttack(e,[t[0]],[t[1]]):this.aiAttack(e)}getCoordinates(){return[Math.floor(10*Math.random()),Math.floor(10*Math.random())]}}(()=>{let e,t;function n(){let r=a(),i=a();"x"!==e.fleet.grid[r][i]&&"-"!==e.fleet.grid[r][i]?(t.attack(e,r,i),h.pub("strikeBack",[e,r,i])):n()}function a(e){let t=Math.floor(10*Math.random()),n=e||1;return t>10-n&&(t=10-n),t}h.sub("newGame",(function(){e=new I("user"),t=new I("computer");const n={p1:e,p2:t};return(r=t).fleet.allShips.forEach((e=>{for(;!e.isPlaced;){let t=[!0,!1];e.isVertical=t[Math.floor(Math.random()*t.length)];let n=a(e.length),i=a(e.length);r.fleet.placeShip(e,n,i)}})),console.log(r.fleet.grid),h.pub("gameCreated",n),t;var r})),h.sub("missileLaunched",(function(a){e.attack(t,a[0],a[1]);let r=t.fleet.grid[a[0]][a[1]];h.pub("missileStrike",[a[2],r]),t.fleet.isFleetOperational&&n()})),h.sub("rotateShip",(function(t){e.fleet.allShips.forEach((e=>{e.name===t&&(e.isVertical=!e.isVertical)}))})),h.sub("shipPlaced",(function(t){let n;e.fleet.allShips.forEach((e=>{t.dataset.value===e.name&&(n=e)}));let a=parseInt(t.dataset.x),r=parseInt(t.dataset.y);e.fleet.placeShip(n,a,r)}))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,