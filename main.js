(()=>{"use strict";var e={747:(e,t,n)=>{n.d(t,{Z:()=>f});var a=n(537),r=n.n(a),i=n(645),s=n.n(i),l=n(667),o=n.n(l),c=new URL(n(63),n.b),d=s()(r()),u=o()(c);d.push([e.id,"@font-face {\n    font-family: 'major_snafuregular';\n    src: url("+u+") format('woff');\n    font-weight: normal;\n    font-style: normal;\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\nh1 {\n    font-family: 'major_snafuregular';\n}\n\n#display {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    column-gap: 20px;\n}\n\n#shipContainer {\n    display: none;\n    flex-direction: column;\n    width: 200px;\n}\n\n#ships {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n}\n\n.ship {\n    height: 40px;\n}\n\n.vertical {\n    width: 200px;\n    height: 200px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.hide {\n    display: none;\n}\n\n.dragOver {\n    background-color: lightgrey;\n}\n\n.invalid {\n    background-color: lightcoral;\n}\n\n.rotate {\n    transform: rotate(-90deg);\n}\n\n.board {\n    display: grid;\n    grid: repeat(10, 1fr) / repeat(10, 1fr);\n    width: 400px;\n    height: 400px;\n}\n\n.cell {\n    border: 1px solid black;\n    position: relative;\n}\n\n.cell>img {\n    position: absolute;\n}\n\n.cell[data-value='-']:after {\n    content: '-';\n}\n\n.cell[data-value='x']:after {\n    content: 'x';\n}","",{version:3,sources:["webpack://./src/stylesheet.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,2DAA2D;IAC3D,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;AAC3B;;AAEA;IACI,iCAAiC;AACrC;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,WAAW;IACX,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;AAC3B;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,uCAAuC;IACvC,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,uBAAuB;IACvB,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB",sourcesContent:["@font-face {\n    font-family: 'major_snafuregular';\n    src: url('./fonts/major_shift-webfont.woff') format('woff');\n    font-weight: normal;\n    font-style: normal;\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\nh1 {\n    font-family: 'major_snafuregular';\n}\n\n#display {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    column-gap: 20px;\n}\n\n#shipContainer {\n    display: none;\n    flex-direction: column;\n    width: 200px;\n}\n\n#ships {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n}\n\n.ship {\n    height: 40px;\n}\n\n.vertical {\n    width: 200px;\n    height: 200px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.hide {\n    display: none;\n}\n\n.dragOver {\n    background-color: lightgrey;\n}\n\n.invalid {\n    background-color: lightcoral;\n}\n\n.rotate {\n    transform: rotate(-90deg);\n}\n\n.board {\n    display: grid;\n    grid: repeat(10, 1fr) / repeat(10, 1fr);\n    width: 400px;\n    height: 400px;\n}\n\n.cell {\n    border: 1px solid black;\n    position: relative;\n}\n\n.cell>img {\n    position: absolute;\n}\n\n.cell[data-value='-']:after {\n    content: '-';\n}\n\n.cell[data-value='x']:after {\n    content: 'x';\n}"],sourceRoot:""}]);const f=d},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(a)for(var l=0;l<this.length;l++){var o=this[l][0];null!=o&&(s[o]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);a&&s[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(r," */"),s=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(s).concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var i={},s=[],l=0;l<e.length;l++){var o=e[l],c=a.base?o[0]+a.base:o[0],d=i[c]||0,u="".concat(c," ").concat(d);i[c]=d+1;var f=n(u),p={css:o[1],media:o[2],sourceMap:o[3],supports:o[4],layer:o[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var g=r(p,a);a.byIndex=l,t.splice(l,0,{identifier:u,updater:g,references:1})}s.push(u)}return s}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=a(e=e||[],r=r||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var l=n(i[s]);t[l].references--}for(var o=a(e,r),c=0;c<i.length;c++){var d=n(i[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=o}}},569:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,r&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},63:(e,t,n)=>{e.exports=n.p+"f1bb1cc9454becf1325e.woff"}},t={};function n(a){var r=t[a];if(void 0!==r)return r.exports;var i=t[a]={id:a,exports:{}};return e[a](i,i.exports,n),i.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var a=t.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var e=n(379),t=n.n(e),a=n(795),r=n.n(a),i=n(569),s=n.n(i),l=n(565),o=n.n(l),c=n(216),d=n.n(c),u=n(589),f=n.n(u),p=n(747),g={};g.styleTagTransform=f(),g.setAttributes=o(),g.insert=s().bind(null,"head"),g.domAPI=r(),g.insertStyleElement=d(),t()(p.Z,g),p.Z&&p.Z.locals&&p.Z.locals;const h={pubsub:{},sub:function(e,t){this.pubsub[e]=this.pubsub[e]||[],this.pubsub[e].push(t)},unsub:function(e,t){if(this.pubsub[e])for(var n=0;n<this.pubsub[e].length;n++)if(this.pubsub[e][n]===t){this.pubsub[e].splice(n,1);break}},pub:function(e,t){this.pubsub[e]&&this.pubsub[e].forEach((function(e){e(t)}))}};class A{isVertical=!1;isOperational=!0;isPlaced=!1;constructor(e,t){this.name=e,this.length=t,this.defense=this.buildShip()}buildShip(){let e=[];for(let t=0;t<this.length;t++)e.push("o");return e}hit(e){this.defense.splice(e,1,"x")}isSunk(){return!this.defense.includes("o")}}class m{carrier=new A("carrier",5);battleship=new A("battleship",4);destroyer=new A("destroyer",3);submarine=new A("submarine",3);patrol=new A("patrol",2);allShips=[this.carrier,this.battleship,this.destroyer,this.submarine,this.patrol];grid=[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]];placeShip(e,t,n){let a,r=0;if(e.isVertical){a=[];for(let r=t;r<t+e.length;r++){let e=this.grid[r][n];a.push(e)}if(a.every(this.isZero)){let a=0;for(let r=t;r<t+e.length;r++)this.grid[r].fill(e.name+a,n,n+1),a++;e.isPlaced=!0}}else for(;r<e.length;r++)a=this.grid[t].slice(n,n+e.length),a.every(this.isZero)&&(this.grid[t].fill(e.name+r,n,++n),e.isPlaced=!0)}rotateShip(e){!1===e.isVertical?e.isVertical=!0:(ss,e.isVertical=!1)}isZero(e){return 0===e}receiveAttack(e,t){0===this.grid[e][t]?this.miss(e,t):(this.allShips.forEach((n=>{let a=this.grid[e][t].slice(0,-1),r=this.grid[e][t].slice(-1);n.name===a&&(n.hit(r),this.isSunk(n))})),this.grid[e][t]="x")}miss(e,t){this.grid[e][t]="-"}isSunk(e){e.defense.every((t=>{"x"===t&&(e.isOperational=!1,this.isFleetSunk())}))}isFleetSunk(){return this.allShips.every((e=>{if(!1===e.isOperational)return!0}))}}class v{fleet=new m;attack(e,t,n){e.fleet.receiveAttack(t,n)}aiAttack(e){let t=this.getCoordinates();0===e.fleet.grid[t[0]][t[1]]?e.fleet.receiveAttack([t[0]],[t[1]]):this.aiAttack(e)}getCoordinates(){return[Math.floor(10*Math.random()),Math.floor(10*Math.random())]}}(()=>{let e,t;function n(e){let t=Math.floor(10*Math.random());return t>10-e&&(t=10-e),t}h.sub("newGame",(function(){e=new v,t=new v;const a={p1:e,p2:t};var r;return(r=t).fleet.allShips.forEach((e=>{for(;!e.isPlaced;){let t=[!0,!1];e.isVertical=t[Math.floor(Math.random()*t.length)];let a=n(e.length),i=n(e.length);r.fleet.placeShip(e,a,i)}})),console.log(r.fleet.grid),h.pub("gameCreated",a),t})),h.sub("missileLaunched",(function(n){e.attack(t,n[0],n[1]);let a=t.fleet.grid[n[0]][n[1]];h.pub("missileStrike",[n[2],a])})),h.sub("rotateShip",(function(t){e.fleet.allShips.forEach((e=>{e.name===t&&(e.isVertical=!e.isVertical)}))}))})();const b=n.p+"4d764a31954b59e12848.png",y=n.p+"d33d9178072464f3bf1b.png",C=n.p+"76d396d8adbae746e274.png",E=n.p+"bd4e3690cb19dae54816.png",x=n.p+"53f5d0424f8542fbc550.png";(()=>{const e=document.getElementById("playButton"),t=(document.getElementById("display"),document.getElementById("playerBoard")),n=document.getElementById("aiBoard"),a=document.getElementById("shipContainer"),r=document.getElementById("ships"),i=document.getElementById("rotate");let s,l,o,c,d,u;function f(e){s=e.target.id,e.dataTransfer.setData("image",e.target.id),setTimeout((()=>{e.target.classList.add("hide")}))}function p(e){[...e.target.parentElement.children].forEach((e=>e.classList.remove("dragOver"))),e.target.classList.remove("hide")}document.getElementsByClassName("dragOver"),e.addEventListener("click",(function(){e.style.display="none",h.pub("newGame")})),i.addEventListener("click",(function(){r.firstChild.classList.toggle("vertical"),r.firstChild.firstChild.classList.toggle("rotate"),h.pub("rotateShip",r.firstChild.firstChild.id)})),h.sub("gameCreated",(function(i){e.style.display="none",a.style.display="flex",function(e){for(let n=0;n<10;n++)e.fleet.grid[n].forEach(((e,a)=>{let r=document.createElement("div");r.className="cell",r.dataset.x=n,r.dataset.y=a,r.dataset.value=e,r.addEventListener("dragenter",m),r.addEventListener("dragover",v),r.addEventListener("dragleave",I),r.addEventListener("drop",B),t.appendChild(r)}))}(i.p1),function(e){for(let t=0;t<10;t++)e.fleet.grid[t].forEach(((e,a)=>{let r=document.createElement("div");r.className="cell",r.dataset.x=t,r.dataset.y=a,r.dataset.value=e,n.appendChild(r),r.addEventListener("click",L)}))}(i.p2),function(e){const t=[b,y,E,C,x];let n=0;e.fleet.allShips.forEach((e=>{const a=document.createElement("div");a.id=e.name+"Container";const i=new Image;i.src=t[n],i.id=e.name,i.className="ship",i.draggable=!0,i.addEventListener("dragstart",f),i.addEventListener("dragend",p),a.appendChild(i),r.appendChild(a),n++}))}(i.p1),l=i})),h.sub("missileStrike",(function(e){e[0].dataset.value=e[1]}));let g=[];function A(e){return 0==e.dataset.value}function m(e){if("carrier"===s){if(!1===l.p1.fleet.carrier.isVertical)e.target.dataset.y<6?(o=e.target.nextElementSibling,c=o.nextElementSibling,d=c.nextElementSibling,u=d.nextElementSibling):e.target.classList.add("invalid");else if(!0===l.p1.fleet.carrier.isVertical)if(e.target.dataset.x<6){let t=e.target.dataset.x,n=e.target.dataset.y;[...e.target.parentElement.children].forEach((e=>{e.dataset.y===n&&e.dataset.x===t+1&&(o=e),e.dataset.y===n&&e.dataset.x===t+2&&(c=e),e.dataset.y===n&&e.dataset.x===t+3&&(d=e),e.dataset.y===n&&e.dataset.x===t+4&&(u=e)}))}else e.target.classList.add("invalid");g=[e.target,o,c,d,u],g.every(A)?(e.preventDefault(),g.forEach((e=>{e.classList.add("dragOver")}))):e.target.classList.add("invalid")}else"battleship"===s?e.target.dataset.y<7?(o=e.target.nextElementSibling,c=o.nextElementSibling,d=c.nextElementSibling,g=[e.target,o,c,d],g.every(A)?(e.preventDefault(),g.forEach((e=>{e.classList.add("dragOver")}))):e.target.classList.add("invalid")):e.target.classList.add("invalid"):"destroyer"===s||"submarine"===s?e.target.dataset.y<8?(o=e.target.nextElementSibling,c=o.nextElementSibling,g=[e.target,o,c],g.every(A)?(e.preventDefault(),g.forEach((e=>{e.classList.add("dragOver")}))):e.target.classList.add("invalid")):e.target.classList.add("invalid"):"patrol"===s&&(e.target.dataset.y<9?(o=e.target.nextElementSibling,g=[e.target,o],g.every(A)?(e.preventDefault(),g.forEach((e=>{e.classList.add("dragOver")}))):e.target.classList.add("invalid")):e.target.classList.add("invalid"))}function v(e){"carrier"===s?e.target.dataset.y<6?(o=e.target.nextElementSibling,c=o.nextElementSibling,d=c.nextElementSibling,u=d.nextElementSibling,g=[e.target,o,c,d,u],g.every(A)?(e.preventDefault(),g.forEach((e=>{e.classList.add("dragOver")}))):e.target.classList.add("invalid")):e.target.classList.add("invalid"):"battleship"===s?e.target.dataset.y<7?(o=e.target.nextElementSibling,c=o.nextElementSibling,d=c.nextElementSibling,g=[e.target,o,c,d],g.every(A)?(e.preventDefault(),g.forEach((e=>{e.classList.add("dragOver")}))):e.target.classList.add("invalid")):e.target.classList.add("invalid"):"destroyer"===s||"submarine"===s?e.target.dataset.y<8?(o=e.target.nextElementSibling,c=o.nextElementSibling,g=[e.target,o,c],g.every(A)?(e.preventDefault(),g.forEach((e=>{e.classList.add("dragOver")}))):e.target.classList.add("invalid")):e.target.classList.add("invalid"):"patrol"===s&&(e.target.dataset.y<9?(o=e.target.nextElementSibling,g=[e.target,o],g.every(A)?(e.preventDefault(),g.forEach((e=>{e.classList.add("dragOver")}))):e.target.classList.add("invalid")):e.target.classList.add("invalid"))}function I(e){[...e.target.parentElement.children].forEach((e=>e.classList.remove("dragOver"))),[...e.target.parentElement.children].forEach((e=>e.classList.remove("invalid")))}function B(e){const t=document.getElementsByClassName("dragOver");h.pub("shipPlaced",t),[...e.target.parentElement.children].forEach((e=>e.classList.remove("dragOver")));const n=e.dataTransfer.getData("image"),a=document.getElementById(n);e.target.appendChild(a),a.classList.remove("hide"),g.forEach((e=>{e.dataset.value=n}));let i=document.getElementById(n+"Container");r.contains(i)&&r.removeChild(i)}function L(e){let t=e.target.dataset.x,n=e.target.dataset.y;h.pub("missileLaunched",[t,n,e.target]),e.target.removeEventListener("click",L)}})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQ3JCQyxFQUFJeEYsRUFBRVIsT0FBTytKLFFBQVEvRCxFQUV6QjlCLEVBQU9LLElBQUksa0JBQW1CLENBQUN3QixFQUFFQyxFQUFHeEYsRUFBRVIsU0FDdENRLEVBQUVSLE9BQU91TCxvQkFBb0IsUUFBU2pCLEtBM1Z4QixJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlc2hlZXQuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlc2hlZXQuY3NzP2Q3NGQiLCJ3ZWJwYWNrOi8vLy4vc3JjL3B1YnN1Yi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hpcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZWJvYXJkLmpzIiwid2VicGFjazovLy8uL3NyYy9wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWVMb29wLmpzIiwid2VicGFjazovLy8uL3NyYy9ldmVudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4vZm9udHMvbWFqb3Jfc2hpZnQtd2ViZm9udC53b2ZmXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGZvbnQtZmFjZSB7XFxuICAgIGZvbnQtZmFtaWx5OiAnbWFqb3Jfc25hZnVyZWd1bGFyJztcXG4gICAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpIGZvcm1hdCgnd29mZicpO1xcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XFxufVxcblxcbmJvZHkge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuXFxuaDEge1xcbiAgICBmb250LWZhbWlseTogJ21ham9yX3NuYWZ1cmVndWxhcic7XFxufVxcblxcbiNkaXNwbGF5IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBjb2x1bW4tZ2FwOiAyMHB4O1xcbn1cXG5cXG4jc2hpcENvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIHdpZHRoOiAyMDBweDtcXG59XFxuXFxuI3NoaXBzIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxufVxcblxcbi5zaGlwIHtcXG4gICAgaGVpZ2h0OiA0MHB4O1xcbn1cXG5cXG4udmVydGljYWwge1xcbiAgICB3aWR0aDogMjAwcHg7XFxuICAgIGhlaWdodDogMjAwcHg7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uaGlkZSB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5kcmFnT3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JleTtcXG59XFxuXFxuLmludmFsaWQge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGNvcmFsO1xcbn1cXG5cXG4ucm90YXRlIHtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoLTkwZGVnKTtcXG59XFxuXFxuLmJvYXJkIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZDogcmVwZWF0KDEwLCAxZnIpIC8gcmVwZWF0KDEwLCAxZnIpO1xcbiAgICB3aWR0aDogNDAwcHg7XFxuICAgIGhlaWdodDogNDAwcHg7XFxufVxcblxcbi5jZWxsIHtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLmNlbGw+aW1nIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG5cXG4uY2VsbFtkYXRhLXZhbHVlPSctJ106YWZ0ZXIge1xcbiAgICBjb250ZW50OiAnLSc7XFxufVxcblxcbi5jZWxsW2RhdGEtdmFsdWU9J3gnXTphZnRlciB7XFxuICAgIGNvbnRlbnQ6ICd4JztcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlc2hlZXQuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksaUNBQWlDO0lBQ2pDLDJEQUEyRDtJQUMzRCxtQkFBbUI7SUFDbkIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0Qix1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSxpQ0FBaUM7QUFDckM7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsdUJBQXVCO0lBQ3ZCLFdBQVc7SUFDWCxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osYUFBYTtJQUNiLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtJQUNJLDJCQUEyQjtBQUMvQjs7QUFFQTtJQUNJLDRCQUE0QjtBQUNoQzs7QUFFQTtJQUNJLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLGFBQWE7SUFDYix1Q0FBdUM7SUFDdkMsWUFBWTtJQUNaLGFBQWE7QUFDakI7O0FBRUE7SUFDSSx1QkFBdUI7SUFDdkIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksWUFBWTtBQUNoQjs7QUFFQTtJQUNJLFlBQVk7QUFDaEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGZvbnQtZmFjZSB7XFxuICAgIGZvbnQtZmFtaWx5OiAnbWFqb3Jfc25hZnVyZWd1bGFyJztcXG4gICAgc3JjOiB1cmwoJy4vZm9udHMvbWFqb3Jfc2hpZnQtd2ViZm9udC53b2ZmJykgZm9ybWF0KCd3b2ZmJyk7XFxuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG59XFxuXFxuYm9keSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG5cXG5oMSB7XFxuICAgIGZvbnQtZmFtaWx5OiAnbWFqb3Jfc25hZnVyZWd1bGFyJztcXG59XFxuXFxuI2Rpc3BsYXkge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGNvbHVtbi1nYXA6IDIwcHg7XFxufVxcblxcbiNzaGlwQ29udGFpbmVyIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgd2lkdGg6IDIwMHB4O1xcbn1cXG5cXG4jc2hpcHMge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG59XFxuXFxuLnNoaXAge1xcbiAgICBoZWlnaHQ6IDQwcHg7XFxufVxcblxcbi52ZXJ0aWNhbCB7XFxuICAgIHdpZHRoOiAyMDBweDtcXG4gICAgaGVpZ2h0OiAyMDBweDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5oaWRlIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmRyYWdPdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRncmV5O1xcbn1cXG5cXG4uaW52YWxpZCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Y29yYWw7XFxufVxcblxcbi5yb3RhdGUge1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtOTBkZWcpO1xcbn1cXG5cXG4uYm9hcmQge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkOiByZXBlYXQoMTAsIDFmcikgLyByZXBlYXQoMTAsIDFmcik7XFxuICAgIHdpZHRoOiA0MDBweDtcXG4gICAgaGVpZ2h0OiA0MDBweDtcXG59XFxuXFxuLmNlbGwge1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4uY2VsbD5pbWcge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcblxcbi5jZWxsW2RhdGEtdmFsdWU9Jy0nXTphZnRlciB7XFxuICAgIGNvbnRlbnQ6ICctJztcXG59XFxuXFxuLmNlbGxbZGF0YS12YWx1ZT0neCddOmFmdGVyIHtcXG4gICAgY29udGVudDogJ3gnO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpOyAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH0gLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXG5cbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzaGVldC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlc2hlZXQuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiZXhwb3J0IGNvbnN0IHB1YnN1YiA9IHtcbiAgICBwdWJzdWI6IHt9LFxuICAgIHN1YjogZnVuY3Rpb24oc3Vic2NyaXB0aW9uLCBmbikge1xuICAgICAgICB0aGlzLnB1YnN1YltzdWJzY3JpcHRpb25dID0gdGhpcy5wdWJzdWJbc3Vic2NyaXB0aW9uXSB8fCBbXTtcbiAgICAgICAgdGhpcy5wdWJzdWJbc3Vic2NyaXB0aW9uXS5wdXNoKGZuKTtcbiAgICB9LFxuICAgIHVuc3ViOiBmdW5jdGlvbihzdWJzY3JpcHRpb24sIGZuKSB7XG4gICAgICAgIGlmICh0aGlzLnB1YnN1YltzdWJzY3JpcHRpb25dKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucHVic3ViW3N1YnNjcmlwdGlvbl0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnB1YnN1YltzdWJzY3JpcHRpb25dW2ldID09PSBmbikge1xuICAgICAgICAgICAgICAgIHRoaXMucHVic3ViW3N1YnNjcmlwdGlvbl0uc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgcHViOiBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uLCBkYXRhKSB7XG4gICAgICAgIGlmICh0aGlzLnB1YnN1YltzdWJzY3JpcHRpb25dKSB7XG4gICAgICAgICAgICB0aGlzLnB1YnN1YltzdWJzY3JpcHRpb25dLmZvckVhY2goZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgIGZuKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59OyIsImV4cG9ydCBjbGFzcyBTaGlwIHtcbiAgICBpc1ZlcnRpY2FsID0gZmFsc2U7XG4gICAgaXNPcGVyYXRpb25hbCA9IHRydWU7XG4gICAgaXNQbGFjZWQgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGxlbmd0aCkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdGhpcy5kZWZlbnNlID0gdGhpcy5idWlsZFNoaXAoKTtcbiAgICB9XG5cbiAgICBidWlsZFNoaXAoKSB7XG4gICAgICAgIGxldCBhcnJheSA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJyYXkucHVzaCgnbycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICBoaXQoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5kZWZlbnNlLnNwbGljZShpbmRleCwgMSwgJ3gnKTtcbiAgICB9XG5cbiAgICBpc1N1bmsoKSB7XG4gICAgICAgIGlmICh0aGlzLmRlZmVuc2UuaW5jbHVkZXMoJ28nKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbn0iLCJpbXBvcnQge1NoaXB9IGZyb20gJy4vc2hpcCc7XG5cbmV4cG9ydCBjbGFzcyBHYW1lYm9hcmQge1xuXG4gICAgY2FycmllciA9IG5ldyBTaGlwKCdjYXJyaWVyJywgNSk7XG4gICAgYmF0dGxlc2hpcCA9IG5ldyBTaGlwKCdiYXR0bGVzaGlwJywgNCk7XG4gICAgZGVzdHJveWVyID0gbmV3IFNoaXAoJ2Rlc3Ryb3llcicsIDMpO1xuICAgIHN1Ym1hcmluZSA9IG5ldyBTaGlwKCdzdWJtYXJpbmUnLCAzKTtcbiAgICBwYXRyb2wgPSBuZXcgU2hpcCgncGF0cm9sJywgMik7XG5cbiAgICBhbGxTaGlwcyA9IFt0aGlzLmNhcnJpZXIsIHRoaXMuYmF0dGxlc2hpcCwgdGhpcy5kZXN0cm95ZXIsIHRoaXMuc3VibWFyaW5lLCB0aGlzLnBhdHJvbF07XG5cbiAgICBncmlkID0gW1xuICAgICAgICBbMCwwLDAsMCwwLDAsMCwwLDAsMF0sXG4gICAgICAgIFswLDAsMCwwLDAsMCwwLDAsMCwwXSxcbiAgICAgICAgWzAsMCwwLDAsMCwwLDAsMCwwLDBdLFxuICAgICAgICBbMCwwLDAsMCwwLDAsMCwwLDAsMF0sXG4gICAgICAgIFswLDAsMCwwLDAsMCwwLDAsMCwwXSxcbiAgICAgICAgWzAsMCwwLDAsMCwwLDAsMCwwLDBdLFxuICAgICAgICBbMCwwLDAsMCwwLDAsMCwwLDAsMF0sXG4gICAgICAgIFswLDAsMCwwLDAsMCwwLDAsMCwwXSxcbiAgICAgICAgWzAsMCwwLDAsMCwwLDAsMCwwLDBdLFxuICAgICAgICBbMCwwLDAsMCwwLDAsMCwwLDAsMF1cbiAgICBdO1xuXG4gICAgcGxhY2VTaGlwKHNoaXAsIHgsIHkpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgbGV0IHNwYWNlO1xuXG4gICAgICAgIGlmKCFzaGlwLmlzVmVydGljYWwpIHtcbiAgICAgICAgICAgIGZvciAoOyBpbmRleCA8IHNoaXAubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgc3BhY2UgPSB0aGlzLmdyaWRbeF0uc2xpY2UoeSwgeSArIHNoaXAubGVuZ3RoKTtcblxuICAgICAgICAgICAgICAgIGlmIChzcGFjZS5ldmVyeSh0aGlzLmlzWmVybykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmlkW3hdLmZpbGwoc2hpcC5uYW1lICsgaW5kZXgsIHksICsreSk7XG4gICAgICAgICAgICAgICAgICAgIHNoaXAuaXNQbGFjZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3BhY2UgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSB4OyBpIDwgeCArIHNoaXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY2VsbCA9IHRoaXMuZ3JpZFtpXVt5XTtcbiAgICAgICAgICAgICAgICBzcGFjZS5wdXNoKGNlbGwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3BhY2UuZXZlcnkodGhpcy5pc1plcm8pKSAge1xuICAgICAgICAgICAgICAgIGxldCBuID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0geDsgaiA8IHggKyBzaGlwLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JpZFtqXS5maWxsKHNoaXAubmFtZSArIG4sIHksIHkrMSk7XG4gICAgICAgICAgICAgICAgICAgIG4rKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2hpcC5pc1BsYWNlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByb3RhdGVTaGlwKHNoaXApIHtcbiAgICAgICAgaWYgKHNoaXAuaXNWZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHNoaXAuaXNWZXJ0aWNhbCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7c3NcbiAgICAgICAgICAgIHNoaXAuaXNWZXJ0aWNhbCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNaZXJvKG51bSkge1xuICAgICAgICByZXR1cm4gbnVtID09PSAwO1xuICAgIH0gXG5cbiAgICByZWNlaXZlQXR0YWNrKHgsIHkpIHtcbiAgICAgICAgaWYgKHRoaXMuZ3JpZFt4XVt5XSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5taXNzKHgsIHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hbGxTaGlwcy5mb3JFYWNoKHNoaXAgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBoaXRTaGlwID0gdGhpcy5ncmlkW3hdW3ldLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgICAgICAgICBsZXQgaGl0SW5kZXggPSB0aGlzLmdyaWRbeF1beV0uc2xpY2UoLTEpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNoaXAubmFtZSA9PT0gaGl0U2hpcCkge1xuICAgICAgICAgICAgICAgICAgICBzaGlwLmhpdChoaXRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNTdW5rKHNoaXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmdyaWRbeF1beV0gPSAneCc7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIG1pc3MoeCwgeSkge1xuICAgICAgICB0aGlzLmdyaWRbeF1beV0gPSAnLSc7XG4gICAgfVxuXG4gICAgaXNTdW5rKHNoaXApIHtcbiAgICAgICAgc2hpcC5kZWZlbnNlLmV2ZXJ5KGVsID0+IHtcbiAgICAgICAgICAgIGlmIChlbCA9PT0gJ3gnKSB7XG4gICAgICAgICAgICAgICAgc2hpcC5pc09wZXJhdGlvbmFsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0ZsZWV0U3VuaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpc0ZsZWV0U3VuaygpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuYWxsU2hpcHMuZXZlcnkoc2hpcCA9PiB7XG4gICAgICAgICAgICBpZiAoc2hpcC5pc09wZXJhdGlvbmFsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59IiwiaW1wb3J0IHsgR2FtZWJvYXJkIH0gZnJvbSAnLi9nYW1lYm9hcmQnO1xuXG5leHBvcnQgY2xhc3MgUGxheWVyIHtcblxuICAgIGZsZWV0ID0gbmV3IEdhbWVib2FyZDtcblxuICAgIGF0dGFjayhlbmVteSwgeCwgeSkge1xuICAgICAgICBlbmVteS5mbGVldC5yZWNlaXZlQXR0YWNrKHgseSk7XG4gICAgfVxuXG4gICAgYWlBdHRhY2soZW5lbXkpIHtcbiAgICAgICAgbGV0IGNvb3JkaW5hdGVzID0gdGhpcy5nZXRDb29yZGluYXRlcygpO1xuXG4gICAgICAgIGlmIChlbmVteS5mbGVldC5ncmlkW2Nvb3JkaW5hdGVzWzBdXVtjb29yZGluYXRlc1sxXV0gPT09IDApIHtcbiAgICAgICAgICAgIGVuZW15LmZsZWV0LnJlY2VpdmVBdHRhY2soW2Nvb3JkaW5hdGVzWzBdXSwgW2Nvb3JkaW5hdGVzWzFdXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFpQXR0YWNrKGVuZW15KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldENvb3JkaW5hdGVzKCkge1xuICAgICAgICBsZXQgeCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbiAgICAgICAgbGV0IHkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG5cbiAgICAgICAgcmV0dXJuIFt4LCB5XTtcbiAgICB9XG59IiwiaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnLi9wbGF5ZXInO1xuaW1wb3J0IHsgcHVic3ViIH0gZnJvbSAnLi9wdWJzdWInO1xuXG5leHBvcnQgY29uc3QgZ2FtZSA9ICgoKSA9PiB7XG5cbiAgICBsZXQgcDE7XG4gICAgbGV0IHAyO1xuXG4gICAgcHVic3ViLnN1YignbmV3R2FtZScsIGNyZWF0ZUdhbWUpO1xuICAgIHB1YnN1Yi5zdWIoJ21pc3NpbGVMYXVuY2hlZCcsIG1pc3NpbGVTdHJpa2UpO1xuICAgIHB1YnN1Yi5zdWIoJ3JvdGF0ZVNoaXAnLCByb3RhdGVTaGlwKTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUdhbWUoKSB7XG4gICAgICAgIHAxID0gbmV3IFBsYXllcjtcbiAgICAgICAgcDIgPSBuZXcgUGxheWVyO1xuXG4gICAgICAgIGNvbnN0IHBsYXllcnMgPSB7XG4gICAgICAgICAgICBwMSxcbiAgICAgICAgICAgIHAyLFxuICAgICAgICB9XG5cbiAgICAgICAgcGxhY2VDb21wdXRlclNoaXBzKHAyKTtcblxuICAgICAgICBwdWJzdWIucHViKCdnYW1lQ3JlYXRlZCcsIHBsYXllcnMpO1xuXG4gICAgICAgIHJldHVybiBwMjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByb3RhdGVTaGlwKHNoaXBOYW1lKSB7XG4gICAgICAgIHAxLmZsZWV0LmFsbFNoaXBzLmZvckVhY2goc2hpcCA9PiB7XG4gICAgICAgICAgICBpZiAoc2hpcC5uYW1lID09PSBzaGlwTmFtZSkge1xuICAgICAgICAgICAgICAgIHNoaXAuaXNWZXJ0aWNhbCA9ICFzaGlwLmlzVmVydGljYWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1pc3NpbGVTdHJpa2UoY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgcDEuYXR0YWNrKHAyLCBjb29yZGluYXRlc1swXSwgY29vcmRpbmF0ZXNbMV0pO1xuXG4gICAgICAgIGxldCBsb2NhdGlvbiA9IHAyLmZsZWV0LmdyaWRbY29vcmRpbmF0ZXNbMF1dW2Nvb3JkaW5hdGVzWzFdXTtcbiAgICAgICAgcHVic3ViLnB1YignbWlzc2lsZVN0cmlrZScsIFtjb29yZGluYXRlc1syXSwgbG9jYXRpb25dKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwbGFjZUNvbXB1dGVyU2hpcHMocGxheWVyKSB7XG4gICAgICAgIHBsYXllci5mbGVldC5hbGxTaGlwcy5mb3JFYWNoKHNoaXAgPT4ge1xuICAgICAgICAgICAgd2hpbGUgKCFzaGlwLmlzUGxhY2VkKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBvc2l0aW9uID0gW3RydWUsIGZhbHNlXTtcbiAgICAgICAgICAgICAgICBzaGlwLmlzVmVydGljYWwgPSBwb3NpdGlvbltNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqcG9zaXRpb24ubGVuZ3RoKV07XG4gICAgICAgICAgICAgICAgbGV0IHggPSBnZW5lcmF0ZUNvb3JkaW5hdGUoc2hpcC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGxldCB5ID0gZ2VuZXJhdGVDb29yZGluYXRlKHNoaXAubGVuZ3RoKTtcbiAgICBcbiAgICAgICAgICAgICAgICBwbGF5ZXIuZmxlZXQucGxhY2VTaGlwKHNoaXAsIHgsIHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5sb2cocGxheWVyLmZsZWV0LmdyaWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlQ29vcmRpbmF0ZShsZW5ndGgpIHtcbiAgICAgICAgbGV0IG51bSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcblxuICAgICAgICBpZiAobnVtID4gMTAgLSBsZW5ndGgpIHtcbiAgICAgICAgICAgIG51bSA9IDEwIC0gbGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnZW5lcmF0ZUNvb3JkaW5hdGUsIGNyZWF0ZUdhbWUsIFxuICAgICAgICBwMTogcDEsIFxuICAgICAgICBwMjogcDIsXG4gICAgfVxuICAgIFxufSkoKTsiLCJpbXBvcnQgeyBwdWJzdWIgfSBmcm9tICcuL3B1YnN1Yic7XG5pbXBvcnQgeyBnYW1lIH0gZnJvbSAnLi9nYW1lTG9vcCc7XG5pbXBvcnQgQ2FycmllciBmcm9tICcuL2ltZy9jYXJyaWVyLnBuZyc7XG5pbXBvcnQgQmF0dGxlc2hpcCBmcm9tICcuL2ltZy9iYXR0bGVzaGlwLnBuZyc7XG5pbXBvcnQgU3VibWFyaW5lIGZyb20gJy4vaW1nL3N1Ym1hcmluZS5wbmcnO1xuaW1wb3J0IERlc3Ryb3llciBmcm9tICcuL2ltZy9kZXN0cm95ZXIucG5nJztcbmltcG9ydCBQYXRyb2wgZnJvbSAnLi9pbWcvcGF0cm9sLnBuZyc7XG5cbmV4cG9ydCBjb25zdCBldmVudHMgPSAoKCkgPT4ge1xuICAgIGNvbnN0IHBsYXlCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGxheUJ1dHRvbicpO1xuICAgIGNvbnN0IGRpc3BsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGlzcGxheScpO1xuICAgIGNvbnN0IHBsYXllckJvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllckJvYXJkJyk7XG4gICAgY29uc3QgYWlCb2FyZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhaUJvYXJkJyk7XG4gICAgY29uc3Qgc2hpcENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaGlwQ29udGFpbmVyJyk7XG4gICAgY29uc3Qgc2hpcHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2hpcHMnKTtcbiAgICBjb25zdCByb3RhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm90YXRlJyk7XG4gICAgY29uc3QgZHJhZ092ZXJDZWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZHJhZ092ZXInKTtcblxuICAgIHBsYXlCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBuZXdHYW1lKTtcbiAgICByb3RhdGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVSb3RhdGUpO1xuXG4gICAgcHVic3ViLnN1YignZ2FtZUNyZWF0ZWQnLCByZW5kZXJHYW1lKTtcbiAgICBwdWJzdWIuc3ViKCdtaXNzaWxlU3RyaWtlJywgcmVuZGVyTWlzc2lsZVN0cmlrZSk7XG5cbiAgICBsZXQgZHJhZ1RhcmdldDtcbiAgICBsZXQgZ2FtZVBsYXllcnM7XG5cbiAgICBmdW5jdGlvbiBuZXdHYW1lKCkge1xuICAgICAgICBwbGF5QnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIHB1YnN1Yi5wdWIoJ25ld0dhbWUnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJHYW1lKHBsYXllcnMpIHtcbiAgICAgICAgcGxheUJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICBzaGlwQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG5cbiAgICAgICAgY3JlYXRlUGxheWVyR3JpZChwbGF5ZXJzLnAxKTtcbiAgICAgICAgY3JlYXRlQ29tcHV0ZXJHcmlkKHBsYXllcnMucDIpOyAgXG4gICAgICAgIHJlbmRlclNoaXBzKHBsYXllcnMucDEpO1xuXG4gICAgICAgIGdhbWVQbGF5ZXJzID0gcGxheWVycztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJTaGlwcyhwbGF5ZXIpIHtcbiAgICAgICAgY29uc3Qgc2hpcEljb25zID0gW0NhcnJpZXIsIEJhdHRsZXNoaXAsIERlc3Ryb3llciwgU3VibWFyaW5lLCBQYXRyb2xdO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIHBsYXllci5mbGVldC5hbGxTaGlwcy5mb3JFYWNoKHNoaXAgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBkaXYuaWQgPSBzaGlwLm5hbWUgKyBcIkNvbnRhaW5lclwiO1xuICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgIGltYWdlLnNyYyA9IHNoaXBJY29uc1tpXTtcbiAgICAgICAgICAgIGltYWdlLmlkID0gc2hpcC5uYW1lO1xuICAgICAgICAgICAgaW1hZ2UuY2xhc3NOYW1lID0gJ3NoaXAnO1xuICAgICAgICAgICAgaW1hZ2UuZHJhZ2dhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdzdGFydCcsIGRyYWdTdGFydCk7XG4gICAgICAgICAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJywgZHJhZ0VuZCk7XG4gICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoaW1hZ2UpO1xuICAgICAgICAgICAgc2hpcHMuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlUGxheWVyR3JpZChwbGF5ZXIpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICAgICAgICBwbGF5ZXIuZmxlZXQuZ3JpZFtpXS5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgY2VsbC5jbGFzc05hbWUgPSAnY2VsbCc7XG4gICAgICAgICAgICAgICAgY2VsbC5kYXRhc2V0LnggPSBpO1xuICAgICAgICAgICAgICAgIGNlbGwuZGF0YXNldC55ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgY2VsbC5kYXRhc2V0LnZhbHVlID0gaXRlbTtcblxuICAgICAgICAgICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VudGVyJywgZHJhZ0VudGVyKTtcbiAgICAgICAgICAgICAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgZHJhZ092ZXIpO1xuICAgICAgICAgICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2xlYXZlJywgZHJhZ0xlYXZlKTtcbiAgICAgICAgICAgICAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBkcm9wKTtcblxuICAgICAgICAgICAgICAgIHBsYXllckJvYXJkLmFwcGVuZENoaWxkKGNlbGwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVDb21wdXRlckdyaWQocGxheWVyKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgICAgICAgcGxheWVyLmZsZWV0LmdyaWRbaV0uZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NOYW1lID0gJ2NlbGwnO1xuICAgICAgICAgICAgICAgIGNlbGwuZGF0YXNldC54ID0gaTtcbiAgICAgICAgICAgICAgICBjZWxsLmRhdGFzZXQueSA9IGluZGV4O1xuICAgICAgICAgICAgICAgIGNlbGwuZGF0YXNldC52YWx1ZSA9IGl0ZW07XG5cbiAgICAgICAgICAgICAgICBhaUJvYXJkLmFwcGVuZENoaWxkKGNlbGwpO1xuICAgICAgICAgICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmaXJlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9nZ2xlUm90YXRlKCkge1xuICAgICAgICBzaGlwcy5maXJzdENoaWxkLmNsYXNzTGlzdC50b2dnbGUoJ3ZlcnRpY2FsJyk7XG4gICAgICAgIHNoaXBzLmZpcnN0Q2hpbGQuZmlyc3RDaGlsZC5jbGFzc0xpc3QudG9nZ2xlKCdyb3RhdGUnKTtcblxuICAgICAgICBwdWJzdWIucHViKCdyb3RhdGVTaGlwJywgc2hpcHMuZmlyc3RDaGlsZC5maXJzdENoaWxkLmlkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkcmFnU3RhcnQoZSkge1xuICAgICAgICBkcmFnVGFyZ2V0ID0gZS50YXJnZXQuaWQ7XG4gICAgICAgIGUuZGF0YVRyYW5zZmVyLnNldERhdGEoJ2ltYWdlJywgZS50YXJnZXQuaWQpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2hpZGUnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZHJhZ0VuZChlKSB7XG4gICAgICAgIFsuLi5lLnRhcmdldC5wYXJlbnRFbGVtZW50LmNoaWxkcmVuXS5mb3JFYWNoKHNpYmxpbmcgPT4gc2libGluZy5jbGFzc0xpc3QucmVtb3ZlKCdkcmFnT3ZlcicpKTtcbiAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZScpO1xuICAgIH1cblxuICAgIGxldCBmaXJzdFNpYmxpbmc7XG4gICAgbGV0IHNlY29uZFNpYmxpbmc7XG4gICAgbGV0IHRoaXJkU2libGluZztcbiAgICBsZXQgZm91cnRoU2libGluZztcbiAgICBsZXQgZHJvcFRhcmdldCA9IFtdO1xuXG4gICAgZnVuY3Rpb24gdmFsdWVaZXJvKGVsKSB7XG4gICAgICAgIHJldHVybiBlbC5kYXRhc2V0LnZhbHVlID09IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZHJhZ0VudGVyKGUpIHtcblxuICAgICAgICBpZiAoZHJhZ1RhcmdldCA9PT0gJ2NhcnJpZXInKSB7XG5cbiAgICAgICAgICAgIGlmIChnYW1lUGxheWVycy5wMS5mbGVldC5jYXJyaWVyLmlzVmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmRhdGFzZXQueSA8IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RTaWJsaW5nID0gZS50YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICBzZWNvbmRTaWJsaW5nID0gZmlyc3RTaWJsaW5nLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgdGhpcmRTaWJsaW5nID0gc2Vjb25kU2libGluZy5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIGZvdXJ0aFNpYmxpbmcgPSB0aGlyZFNpYmxpbmcubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgICAgIH0gIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKCdpbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZ2FtZVBsYXllcnMucDEuZmxlZXQuY2Fycmllci5pc1ZlcnRpY2FsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgIChlLnRhcmdldC5kYXRhc2V0LnggPCA2KSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0YXJnZXRYID0gZS50YXJnZXQuZGF0YXNldC54O1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0WSA9IGUudGFyZ2V0LmRhdGFzZXQueTtcblxuICAgICAgICAgICAgICAgICAgICBbLi4uZS50YXJnZXQucGFyZW50RWxlbWVudC5jaGlsZHJlbl0uZm9yRWFjaChzaWJsaW5nID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaWJsaW5nLmRhdGFzZXQueSA9PT0gdGFyZ2V0WSAmJiBzaWJsaW5nLmRhdGFzZXQueCA9PT0gdGFyZ2V0WCArIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdFNpYmxpbmcgPSBzaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2libGluZy5kYXRhc2V0LnkgPT09IHRhcmdldFkgJiYgc2libGluZy5kYXRhc2V0LnggPT09IHRhcmdldFggKyAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kU2libGluZyA9IHNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaWJsaW5nLmRhdGFzZXQueSA9PT0gdGFyZ2V0WSAmJiBzaWJsaW5nLmRhdGFzZXQueCA9PT0gdGFyZ2V0WCArIDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlyZFNpYmxpbmcgPSBzaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2libGluZy5kYXRhc2V0LnkgPT09IHRhcmdldFkgJiYgc2libGluZy5kYXRhc2V0LnggPT09IHRhcmdldFggKyA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91cnRoU2libGluZyA9IHNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2ludmFsaWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgZHJvcFRhcmdldCA9IFtlLnRhcmdldCwgZmlyc3RTaWJsaW5nLCBzZWNvbmRTaWJsaW5nLCB0aGlyZFNpYmxpbmcsIGZvdXJ0aFNpYmxpbmddO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZHJvcFRhcmdldC5ldmVyeSh2YWx1ZVplcm8pKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGRyb3BUYXJnZXQuZm9yRWFjaCh0YXJnZXQgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZCgnZHJhZ092ZXInKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZCgnaW52YWxpZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRyYWdUYXJnZXQgPT09ICdiYXR0bGVzaGlwJykge1xuXG4gICAgICAgICAgICBpZiAoZS50YXJnZXQuZGF0YXNldC55IDwgNykge1xuICAgICAgICAgICAgICAgIGZpcnN0U2libGluZyA9IGUudGFyZ2V0Lm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgICAgICBzZWNvbmRTaWJsaW5nID0gZmlyc3RTaWJsaW5nLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgICAgICB0aGlyZFNpYmxpbmcgPSBzZWNvbmRTaWJsaW5nLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGRyb3BUYXJnZXQgPSBbZS50YXJnZXQsIGZpcnN0U2libGluZywgc2Vjb25kU2libGluZywgdGhpcmRTaWJsaW5nXTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoZHJvcFRhcmdldC5ldmVyeSh2YWx1ZVplcm8pKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZHJvcFRhcmdldC5mb3JFYWNoKHRhcmdldCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZCgnZHJhZ092ZXInKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZCgnaW52YWxpZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZCgnaW52YWxpZCcpO1xuICAgICAgICAgICAgfSBcblxuICAgICAgICB9IGVsc2UgaWYgKGRyYWdUYXJnZXQgPT09ICdkZXN0cm95ZXInIHx8IGRyYWdUYXJnZXQgPT09ICdzdWJtYXJpbmUnKSB7XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQuZGF0YXNldC55IDwgOCkge1xuICAgICAgICAgICAgICAgIGZpcnN0U2libGluZyA9IGUudGFyZ2V0Lm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgICAgICBzZWNvbmRTaWJsaW5nID0gZmlyc3RTaWJsaW5nLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGRyb3BUYXJnZXQgPSBbZS50YXJnZXQsIGZpcnN0U2libGluZywgc2Vjb25kU2libGluZ107XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGRyb3BUYXJnZXQuZXZlcnkodmFsdWVaZXJvKSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGRyb3BUYXJnZXQuZm9yRWFjaCh0YXJnZXQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2RyYWdPdmVyJyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2ludmFsaWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2ludmFsaWQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2UgaWYgKGRyYWdUYXJnZXQgPT09ICdwYXRyb2wnKSB7XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQuZGF0YXNldC55IDwgOSkge1xuICAgICAgICAgICAgICAgIGZpcnN0U2libGluZyA9IGUudGFyZ2V0Lm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGRyb3BUYXJnZXQgPSBbZS50YXJnZXQsIGZpcnN0U2libGluZ107XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGRyb3BUYXJnZXQuZXZlcnkodmFsdWVaZXJvKSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGRyb3BUYXJnZXQuZm9yRWFjaCh0YXJnZXQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2RyYWdPdmVyJyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2ludmFsaWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2ludmFsaWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRyYWdPdmVyKGUpIHtcblxuICAgICAgICBpZiAoZHJhZ1RhcmdldCA9PT0gJ2NhcnJpZXInKSB7XG5cbiAgICAgICAgICAgIGlmIChlLnRhcmdldC5kYXRhc2V0LnkgPCA2KSB7XG4gICAgICAgICAgICAgICAgZmlyc3RTaWJsaW5nID0gZS50YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgICAgIHNlY29uZFNpYmxpbmcgPSBmaXJzdFNpYmxpbmcubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgICAgIHRoaXJkU2libGluZyA9IHNlY29uZFNpYmxpbmcubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgICAgIGZvdXJ0aFNpYmxpbmcgPSB0aGlyZFNpYmxpbmcubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZHJvcFRhcmdldCA9IFtlLnRhcmdldCwgZmlyc3RTaWJsaW5nLCBzZWNvbmRTaWJsaW5nLCB0aGlyZFNpYmxpbmcsIGZvdXJ0aFNpYmxpbmddO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChkcm9wVGFyZ2V0LmV2ZXJ5KHZhbHVlWmVybykpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBkcm9wVGFyZ2V0LmZvckVhY2godGFyZ2V0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKCdkcmFnT3ZlcicpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKCdpbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKCdpbnZhbGlkJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmIChkcmFnVGFyZ2V0ID09PSAnYmF0dGxlc2hpcCcpIHtcblxuICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmRhdGFzZXQueSA8IDcpIHtcbiAgICAgICAgICAgICAgICBmaXJzdFNpYmxpbmcgPSBlLnRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgc2Vjb25kU2libGluZyA9IGZpcnN0U2libGluZy5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgdGhpcmRTaWJsaW5nID0gc2Vjb25kU2libGluZy5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBkcm9wVGFyZ2V0ID0gW2UudGFyZ2V0LCBmaXJzdFNpYmxpbmcsIHNlY29uZFNpYmxpbmcsIHRoaXJkU2libGluZ107XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGRyb3BUYXJnZXQuZXZlcnkodmFsdWVaZXJvKSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGRyb3BUYXJnZXQuZm9yRWFjaCh0YXJnZXQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2RyYWdPdmVyJyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2ludmFsaWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2ludmFsaWQnKTtcbiAgICAgICAgICAgIH0gXG5cbiAgICAgICAgfSBlbHNlIGlmIChkcmFnVGFyZ2V0ID09PSAnZGVzdHJveWVyJyB8fCBkcmFnVGFyZ2V0ID09PSAnc3VibWFyaW5lJykge1xuICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmRhdGFzZXQueSA8IDgpIHtcbiAgICAgICAgICAgICAgICBmaXJzdFNpYmxpbmcgPSBlLnRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgc2Vjb25kU2libGluZyA9IGZpcnN0U2libGluZy5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBkcm9wVGFyZ2V0ID0gW2UudGFyZ2V0LCBmaXJzdFNpYmxpbmcsIHNlY29uZFNpYmxpbmddO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChkcm9wVGFyZ2V0LmV2ZXJ5KHZhbHVlWmVybykpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBkcm9wVGFyZ2V0LmZvckVhY2godGFyZ2V0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKCdkcmFnT3ZlcicpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKCdpbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKCdpbnZhbGlkJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmIChkcmFnVGFyZ2V0ID09PSAncGF0cm9sJykge1xuICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmRhdGFzZXQueSA8IDkpIHtcbiAgICAgICAgICAgICAgICBmaXJzdFNpYmxpbmcgPSBlLnRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBkcm9wVGFyZ2V0ID0gW2UudGFyZ2V0LCBmaXJzdFNpYmxpbmddO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChkcm9wVGFyZ2V0LmV2ZXJ5KHZhbHVlWmVybykpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBkcm9wVGFyZ2V0LmZvckVhY2godGFyZ2V0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKCdkcmFnT3ZlcicpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKCdpbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKCdpbnZhbGlkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkcmFnTGVhdmUoZSkge1xuICAgICAgICBbLi4uZS50YXJnZXQucGFyZW50RWxlbWVudC5jaGlsZHJlbl0uZm9yRWFjaChzaWJsaW5nID0+IHNpYmxpbmcuY2xhc3NMaXN0LnJlbW92ZSgnZHJhZ092ZXInKSk7XG4gICAgICAgIFsuLi5lLnRhcmdldC5wYXJlbnRFbGVtZW50LmNoaWxkcmVuXS5mb3JFYWNoKHNpYmxpbmcgPT4gc2libGluZy5jbGFzc0xpc3QucmVtb3ZlKCdpbnZhbGlkJykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRyb3AoZSkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdkcmFnT3ZlcicpO1xuICAgICAgICBwdWJzdWIucHViKCdzaGlwUGxhY2VkJywgdGFyZ2V0KTtcblxuICAgICAgICBbLi4uZS50YXJnZXQucGFyZW50RWxlbWVudC5jaGlsZHJlbl0uZm9yRWFjaChzaWJsaW5nID0+IHNpYmxpbmcuY2xhc3NMaXN0LnJlbW92ZSgnZHJhZ092ZXInKSk7XG5cbiAgICAgICAgY29uc3QgaWQgPSBlLmRhdGFUcmFuc2Zlci5nZXREYXRhKCdpbWFnZScpO1xuICAgICAgICBjb25zdCBkcmFnZ2FibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG5cbiAgICAgICAgZS50YXJnZXQuYXBwZW5kQ2hpbGQoZHJhZ2dhYmxlKTtcbiAgICAgICAgZHJhZ2dhYmxlLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKTtcblxuICAgICAgICBkcm9wVGFyZ2V0LmZvckVhY2godGFyZ2V0ID0+IHtcbiAgICAgICAgICAgIHRhcmdldC5kYXRhc2V0LnZhbHVlID0gaWQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBlbXB0eURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkICsgJ0NvbnRhaW5lcicpO1xuICAgICAgICBpZiAoc2hpcHMuY29udGFpbnMoZW1wdHlEaXYpKSB7XG4gICAgICAgICAgICBzaGlwcy5yZW1vdmVDaGlsZChlbXB0eURpdik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGZpcmUoZSkge1xuICAgICAgICBsZXQgeCA9IGUudGFyZ2V0LmRhdGFzZXQueDtcbiAgICAgICAgbGV0IHkgPSBlLnRhcmdldC5kYXRhc2V0Lnk7XG5cbiAgICAgICAgcHVic3ViLnB1YignbWlzc2lsZUxhdW5jaGVkJywgW3gseSwgZS50YXJnZXRdKTtcbiAgICAgICAgZS50YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmaXJlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJNaXNzaWxlU3RyaWtlKHRhcmdldCkge1xuICAgICAgICB0YXJnZXRbMF0uZGF0YXNldC52YWx1ZSA9IHRhcmdldFsxXTtcbiAgICB9XG5cbn0pKCk7Il0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIiwiVVJMIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwidXJsIiwib3B0aW9ucyIsIlN0cmluZyIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidGVzdCIsInNsaWNlIiwiaGFzaCIsIm5lZWRRdW90ZXMiLCJyZXBsYWNlIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibSIsIm4iLCJnZXR0ZXIiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicCIsImIiLCJiYXNlVVJJIiwic2VsZiIsImhyZWYiLCJuYyIsInB1YnN1YiIsInN1YiIsInN1YnNjcmlwdGlvbiIsImZuIiwidW5zdWIiLCJwdWIiLCJmb3JFYWNoIiwiU2hpcCIsImlzVmVydGljYWwiLCJpc09wZXJhdGlvbmFsIiwiaXNQbGFjZWQiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJkZWZlbnNlIiwiYnVpbGRTaGlwIiwiYXJyYXkiLCJoaXQiLCJpc1N1bmsiLCJpbmNsdWRlcyIsIkdhbWVib2FyZCIsImNhcnJpZXIiLCJiYXR0bGVzaGlwIiwiZGVzdHJveWVyIiwic3VibWFyaW5lIiwicGF0cm9sIiwiYWxsU2hpcHMiLCJncmlkIiwicGxhY2VTaGlwIiwic2hpcCIsIngiLCJ5Iiwic3BhY2UiLCJjZWxsIiwiZXZlcnkiLCJpc1plcm8iLCJqIiwiZmlsbCIsInJvdGF0ZVNoaXAiLCJzcyIsIm51bSIsInJlY2VpdmVBdHRhY2siLCJtaXNzIiwiaGl0U2hpcCIsImhpdEluZGV4IiwiZWwiLCJpc0ZsZWV0U3VuayIsIlBsYXllciIsImZsZWV0IiwiYXR0YWNrIiwiZW5lbXkiLCJhaUF0dGFjayIsImNvb3JkaW5hdGVzIiwiZ2V0Q29vcmRpbmF0ZXMiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJwMSIsInAyIiwiZ2VuZXJhdGVDb29yZGluYXRlIiwicGxheWVycyIsInBsYXllciIsInBvc2l0aW9uIiwiY29uc29sZSIsImxvZyIsInNoaXBOYW1lIiwicGxheUJ1dHRvbiIsImdldEVsZW1lbnRCeUlkIiwicGxheWVyQm9hcmQiLCJhaUJvYXJkIiwic2hpcENvbnRhaW5lciIsInNoaXBzIiwicm90YXRlIiwiZHJhZ1RhcmdldCIsImdhbWVQbGF5ZXJzIiwiZmlyc3RTaWJsaW5nIiwic2Vjb25kU2libGluZyIsInRoaXJkU2libGluZyIsImZvdXJ0aFNpYmxpbmciLCJkcmFnU3RhcnQiLCJkYXRhVHJhbnNmZXIiLCJzZXREYXRhIiwic2V0VGltZW91dCIsImNsYXNzTGlzdCIsImFkZCIsImRyYWdFbmQiLCJwYXJlbnRFbGVtZW50IiwiY2hpbGRyZW4iLCJzaWJsaW5nIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaXNwbGF5IiwidG9nZ2xlIiwiY2xhc3NOYW1lIiwiZGF0YXNldCIsInZhbHVlIiwiZHJhZ0VudGVyIiwiZHJhZ092ZXIiLCJkcmFnTGVhdmUiLCJkcm9wIiwiY3JlYXRlUGxheWVyR3JpZCIsImZpcmUiLCJjcmVhdGVDb21wdXRlckdyaWQiLCJzaGlwSWNvbnMiLCJkaXYiLCJpbWFnZSIsIkltYWdlIiwiZHJhZ2dhYmxlIiwicmVuZGVyU2hpcHMiLCJkcm9wVGFyZ2V0IiwidmFsdWVaZXJvIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwidGFyZ2V0WCIsInRhcmdldFkiLCJwcmV2ZW50RGVmYXVsdCIsImdldERhdGEiLCJlbXB0eURpdiIsImNvbnRhaW5zIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciJdLCJzb3VyY2VSb290IjoiIn0=