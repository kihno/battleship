(()=>{"use strict";var e={747:(e,t,n)=>{n.d(t,{Z:()=>f});var r=n(537),a=n.n(r),i=n(645),o=n.n(i),s=n(667),c=n.n(s),l=new URL(n(186),n.b),u=o()(a()),p=c()(l);u.push([e.id,"@font-face {\n    font-family: 'major_snafuregular';\n    src: url("+p+") format('woff');\n    font-weight: normal;\n    font-style: normal;\n}\n\nh1 {\n    font-family: 'major_snafuregular';\n}\n\n#display {\n    display: flex;\n    width: 100%;\n    column-gap: 20px;\n}\n\n.board {\n    display: grid;\n    grid: repeat(10, 1fr) / repeat(10, 1fr);\n    width: 400px;\n    height: 400px;\n}\n\n.cell {\n    border: 1px solid black;\n}\n\n.cell[data-value='-']:after {\n    content: '-';\n}\n\n.cell[data-value='x']:after {\n    content: 'x';\n}","",{version:3,sources:["webpack://./src/stylesheet.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,2DAAmD;IACnD,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,iCAAiC;AACrC;;AAEA;IACI,aAAa;IACb,WAAW;IACX,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,uCAAuC;IACvC,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB",sourcesContent:["@font-face {\n    font-family: 'major_snafuregular';\n    src: url('major_shift-webfont.woff') format('woff');\n    font-weight: normal;\n    font-style: normal;\n}\n\nh1 {\n    font-family: 'major_snafuregular';\n}\n\n#display {\n    display: flex;\n    width: 100%;\n    column-gap: 20px;\n}\n\n.board {\n    display: grid;\n    grid: repeat(10, 1fr) / repeat(10, 1fr);\n    width: 400px;\n    height: 400px;\n}\n\n.cell {\n    border: 1px solid black;\n}\n\n.cell[data-value='-']:after {\n    content: '-';\n}\n\n.cell[data-value='x']:after {\n    content: 'x';\n}"],sourceRoot:""}]);const f=u},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(o[c]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&o[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),t.push(u))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},o=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],u=i[l]||0,p="".concat(l," ").concat(u);i[l]=u+1;var f=n(p),d={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==f)t[f].references++,t[f].updater(d);else{var h=a(d,r);r.byIndex=s,t.splice(s,0,{identifier:p,updater:h,references:1})}o.push(p)}return o}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var s=n(i[o]);t[s].references--}for(var c=r(e,a),l=0;l<i.length;l++){var u=n(i[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},186:(e,t,n)=>{e.exports=n.p+"f1bb1cc9454becf1325e.woff"}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),a=n.n(r),i=n(569),o=n.n(i),s=n(565),c=n.n(s),l=n(216),u=n.n(l),p=n(589),f=n.n(p),d=n(747),h={};h.styleTagTransform=f(),h.setAttributes=c(),h.insert=o().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=u(),t()(d.Z,h),d.Z&&d.Z.locals&&d.Z.locals;class m{isVertical=!1;isOperational=!0;constructor(e,t){this.name=e,this.length=t,this.defense=this.buildShip()}buildShip(){let e=[];for(let t=0;t<this.length;t++)e.push("o");return e}hit(e){this.defense.splice(e,1,"x")}isSunk(){return!this.defense.includes("o")}}const g={pubsub:{},sub:function(e,t){this.pubsub[e]=this.pubsub[e]||[],this.pubsub[e].push(t)},unsub:function(e,t){if(this.pubsub[e])for(var n=0;n<this.pubsub[e].length;n++)if(this.pubsub[e][n]===t){this.pubsub[e].splice(n,1);break}},pub:function(e,t){this.pubsub[e]&&this.pubsub[e].forEach((function(e){e(t)}))}},A=(()=>{let e,t;function n(){e=new v,t=new v;const n={p1:e,p2:t};var a;(a=t).fleet.allShips.forEach((e=>{let t=[!0,!1];e.isVertical=t[Math.floor(Math.random()*t.length)];let n=r(e.length),i=r(e.length);a.fleet.placeShip(e,n,i)})),console.log(a.fleet.grid),g.pub("gameCreated",n)}function r(e){return Math.floor(Math.random()*(9-e+1))}return g.sub("newGame",n),{generateCoordinate:r,createGame:n}})();class b{carrier=new m("carrier",5);battleship=new m("battleship",4);destroyer=new m("destroyer",3);submarine=new m("submarine",3);patrol=new m("patrol",2);allShips=[this.carrier,this.battleship,this.destroyer,this.submarine,this.patrol];grid=[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]];placeShip(e,t,n){let r,a=0;if(e.isVertical)if(r=[],this.grid.forEach((e=>{let t=e.slice(n,n+1);r.concat(t)})),r.every(this.isZero)){let r=0;for(let a=t;a<t+e.length;a++)this.grid[a].fill(e.name+r,n,n+1),r++}else e.isVertical?e.isVertical=!1:e.isVertical=!0,t=A.generateCoordinate(),n=A.generateCoordinate(),this.placeShip(e,t,n);else for(;a<e.length;a++)r=this.grid[t].slice(n,n+e.length),r.every(this.isZero)?this.grid[t].fill(e.name+a,n,++n):(e.isVertical?e.isVertical=!1:e.isVertical=!0,t=A.generateCoordinate(),n=A.generateCoordinate(),this.placeShip(e,t,n))}isZero(e){return 0===e}receiveAttack(e,t){0===this.grid[e][t]?this.miss(e,t):(this.allShips.forEach((n=>{let r=this.grid[e][t].slice(0,-1),a=this.grid[e][t].slice(-1);n.name===r&&(n.hit(a),this.isSunk(n))})),this.grid[e][t]="x")}miss(e,t){this.grid[e][t]="-"}isSunk(e){e.defense.every((t=>{"x"===t&&(e.isOperational=!1,this.isFleetSunk())}))}isFleetSunk(){return this.allShips.every((e=>{if(!1===e.isOperational)return!0}))}}class v{fleet=new b;attack(e,t,n){e.fleet.receiveAttack(t,n)}aiAttack(e){let t=this.getCoordinates();0===e.fleet.grid[t[0]][t[1]]?e.fleet.receiveAttack([t[0]],[t[1]]):this.aiAttack(e)}getCoordinates(){return[Math.floor(10*Math.random()),Math.floor(10*Math.random())]}}(()=>{document.getElementById("display");const e=document.getElementById("playerBoard"),t=document.getElementById("aiBoard");function n(e){let t=e.target.dataset.x,r=e.target.dataset.y;playerOne.attack(playerTwo,t,r),e.target.dataset.value=playerTwo.fleet.grid[t][r],e.target.removeEventListener("click",n)}g.sub("gameCreated",(function(r){playButton.style.display="none",console.log(r.p2),function(t){for(let n=0;n<10;n++)t.fleet.grid[n].forEach(((t,r)=>{let a=document.createElement("button");a.className="cell",a.dataset.x=n,a.dataset.y=r,a.dataset.value=t,e.appendChild(a)}))}(r.p1),function(e){for(let r=0;r<10;r++)e.fleet.grid[r].forEach(((e,a)=>{let i=document.createElement("button");i.className="cell",i.dataset.x=r,i.dataset.y=a,i.dataset.value=e,t.appendChild(i),i.addEventListener("click",n)}))}(r.p2)}))})(),document.getElementById("playButton").addEventListener("click",(function(){g.pub("newGame")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,