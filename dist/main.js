(()=>{"use strict";var e={747:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(537),r=n.n(a),i=n(645),s=n.n(i),l=n(667),o=n.n(l),c=new URL(n(63),n.b),d=s()(r()),u=o()(c);d.push([e.id,"@font-face {\n    font-family: 'major_snafuregular';\n    src: url("+u+") format('woff');\n    font-weight: normal;\n    font-style: normal;\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\nh1 {\n    font-family: 'major_snafuregular';\n}\n\n#display {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    column-gap: 20px;\n}\n\n#shipContainer {\n    display: none;\n    flex-direction: column;\n    width: 200px;\n}\n\n#ships {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n}\n\n.ship {\n    height: 40px;\n}\n\n.vertical {\n    width: 200px;\n    height: 200px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.hide {\n    display: none;\n}\n\n.dragOver {\n    background-color: lightgrey;\n}\n\n.rotate {\n    transform: rotate(-90deg);\n}\n\n.board {\n    display: grid;\n    grid: repeat(10, 1fr) / repeat(10, 1fr);\n    width: 400px;\n    height: 400px;\n}\n\n.cell {\n    border: 1px solid black;\n    position: relative;\n}\n\n.cell>img {\n    position: absolute;\n}\n\n.cell[data-value='-']:after {\n    content: '-';\n}\n\n.cell[data-value='x']:after {\n    content: 'x';\n}","",{version:3,sources:["webpack://./src/stylesheet.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,2DAA2D;IAC3D,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;AAC3B;;AAEA;IACI,iCAAiC;AACrC;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,WAAW;IACX,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;AAC3B;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,uCAAuC;IACvC,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,uBAAuB;IACvB,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB",sourcesContent:["@font-face {\n    font-family: 'major_snafuregular';\n    src: url('./fonts/major_shift-webfont.woff') format('woff');\n    font-weight: normal;\n    font-style: normal;\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\nh1 {\n    font-family: 'major_snafuregular';\n}\n\n#display {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    column-gap: 20px;\n}\n\n#shipContainer {\n    display: none;\n    flex-direction: column;\n    width: 200px;\n}\n\n#ships {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n}\n\n.ship {\n    height: 40px;\n}\n\n.vertical {\n    width: 200px;\n    height: 200px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.hide {\n    display: none;\n}\n\n.dragOver {\n    background-color: lightgrey;\n}\n\n.rotate {\n    transform: rotate(-90deg);\n}\n\n.board {\n    display: grid;\n    grid: repeat(10, 1fr) / repeat(10, 1fr);\n    width: 400px;\n    height: 400px;\n}\n\n.cell {\n    border: 1px solid black;\n    position: relative;\n}\n\n.cell>img {\n    position: absolute;\n}\n\n.cell[data-value='-']:after {\n    content: '-';\n}\n\n.cell[data-value='x']:after {\n    content: 'x';\n}"],sourceRoot:""}]);const p=d},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(a)for(var l=0;l<this.length;l++){var o=this[l][0];null!=o&&(s[o]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);a&&s[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(r," */"),s=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(s).concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var i={},s=[],l=0;l<e.length;l++){var o=e[l],c=a.base?o[0]+a.base:o[0],d=i[c]||0,u="".concat(c," ").concat(d);i[c]=d+1;var p=n(u),f={css:o[1],media:o[2],sourceMap:o[3],supports:o[4],layer:o[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var g=r(f,a);a.byIndex=l,t.splice(l,0,{identifier:u,updater:g,references:1})}s.push(u)}return s}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=a(e=e||[],r=r||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var l=n(i[s]);t[l].references--}for(var o=a(e,r),c=0;c<i.length;c++){var d=n(i[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=o}}},569:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,r&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},63:(e,t,n)=>{e.exports=n.p+"f1bb1cc9454becf1325e.woff"}},t={};function n(a){var r=t[a];if(void 0!==r)return r.exports;var i=t[a]={id:a,exports:{}};return e[a](i,i.exports,n),i.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var a=t.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var e=n(379),t=n.n(e),a=n(795),r=n.n(a),i=n(569),s=n.n(i),l=n(565),o=n.n(l),c=n(216),d=n.n(c),u=n(589),p=n.n(u),f=n(747),g={};g.styleTagTransform=p(),g.setAttributes=o(),g.insert=s().bind(null,"head"),g.domAPI=r(),g.insertStyleElement=d(),t()(f.Z,g),f.Z&&f.Z.locals&&f.Z.locals;const h={pubsub:{},sub:function(e,t){this.pubsub[e]=this.pubsub[e]||[],this.pubsub[e].push(t)},unsub:function(e,t){if(this.pubsub[e])for(var n=0;n<this.pubsub[e].length;n++)if(this.pubsub[e][n]===t){this.pubsub[e].splice(n,1);break}},pub:function(e,t){this.pubsub[e]&&this.pubsub[e].forEach((function(e){e(t)}))}};class A{isVertical=!1;isOperational=!0;isPlaced=!1;constructor(e,t){this.name=e,this.length=t,this.defense=this.buildShip()}buildShip(){let e=[];for(let t=0;t<this.length;t++)e.push("o");return e}hit(e){this.defense.splice(e,1,"x")}isSunk(){return!this.defense.includes("o")}}class m{carrier=new A("carrier",5);battleship=new A("battleship",4);destroyer=new A("destroyer",3);submarine=new A("submarine",3);patrol=new A("patrol",2);allShips=[this.carrier,this.battleship,this.destroyer,this.submarine,this.patrol];grid=[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]];placeShip(e,t,n){let a,r=0;if(e.isVertical){a=[];for(let r=t;r<t+e.length;r++){let e=this.grid[r][n];a.push(e)}if(a.every(this.isZero)){let a=0;for(let r=t;r<t+e.length;r++)this.grid[r].fill(e.name+a,n,n+1),a++;e.isPlaced=!0}}else for(;r<e.length;r++)a=this.grid[t].slice(n,n+e.length),a.every(this.isZero)&&(this.grid[t].fill(e.name+r,n,++n),e.isPlaced=!0)}isZero(e){return 0===e}receiveAttack(e,t){0===this.grid[e][t]?this.miss(e,t):(this.allShips.forEach((n=>{let a=this.grid[e][t].slice(0,-1),r=this.grid[e][t].slice(-1);n.name===a&&(n.hit(r),this.isSunk(n))})),this.grid[e][t]="x")}miss(e,t){this.grid[e][t]="-"}isSunk(e){e.defense.every((t=>{"x"===t&&(e.isOperational=!1,this.isFleetSunk())}))}isFleetSunk(){return this.allShips.every((e=>{if(!1===e.isOperational)return!0}))}}class v{fleet=new m;attack(e,t,n){e.fleet.receiveAttack(t,n)}aiAttack(e){let t=this.getCoordinates();0===e.fleet.grid[t[0]][t[1]]?e.fleet.receiveAttack([t[0]],[t[1]]):this.aiAttack(e)}getCoordinates(){return[Math.floor(10*Math.random()),Math.floor(10*Math.random())]}}(()=>{let e,t;function n(e){let t=Math.floor(10*Math.random());return t>10-e&&(t=10-e),t}h.sub("newGame",(function(){e=new v,t=new v;const a={p1:e,p2:t};var r;return(r=t).fleet.allShips.forEach((e=>{for(;!e.isPlaced;){let t=[!0,!1];e.isVertical=t[Math.floor(Math.random()*t.length)];let a=n(e.length),i=n(e.length);r.fleet.placeShip(e,a,i)}})),console.log(r.fleet.grid),h.pub("gameCreated",a),t})),h.sub("missileLaunched",(function(n){e.attack(t,n[0],n[1]);let a=t.fleet.grid[n[0]][n[1]];h.pub("missileStrike",[n[2],a])})),h.sub("rotateShip",(function(t){e.fleet.allShips.forEach((e=>{e.name===t&&(e.isVertical=!e.isVertical,console.log(e))}))}))})();const b=n.p+"4d764a31954b59e12848.png",y=n.p+"d33d9178072464f3bf1b.png",C=n.p+"76d396d8adbae746e274.png",E=n.p+"bd4e3690cb19dae54816.png",x=n.p+"53f5d0424f8542fbc550.png";(()=>{const e=document.getElementById("playButton"),t=(document.getElementById("display"),document.getElementById("playerBoard")),n=document.getElementById("aiBoard"),a=document.getElementById("shipContainer"),r=document.getElementById("ships"),i=document.getElementById("rotate");let s,l,o,c,d;function u(e){s=e.target.id,e.dataTransfer.setData("image",e.target.id),setTimeout((()=>{e.target.classList.add("hide")}))}function p(e){[...e.target.parentElement.children].forEach((e=>e.classList.remove("dragOver"))),e.target.classList.remove("hide")}function f(e){e.preventDefault(),[...e.target.parentElement.children].forEach((e=>e.classList.remove("dragOver"))),e.target.classList.add("dragOver"),"carrier"===s?(l=e.target.nextElementSibling,l.classList.add("dragOver"),o=l.nextElementSibling,o.classList.add("dragOver"),c=o.nextElementSibling,c.classList.add("dragOver"),d=c.nextElementSibling,d.classList.add("dragOver")):"battleship"===s?(l=e.target.nextElementSibling,l.classList.add("dragOver"),o=l.nextElementSibling,o.classList.add("dragOver"),c=o.nextElementSibling,c.classList.add("dragOver")):"destroyer"===s||"submarine"===s?(l=e.target.nextElementSibling,l.classList.add("dragOver"),o=l.nextElementSibling,o.classList.add("dragOver")):"patrol"===s&&(l=e.target.nextElementSibling,l.classList.add("dragOver"))}function g(e){e.preventDefault(),[...e.target.parentElement.children].forEach((e=>e.classList.remove("dragOver"))),e.target.classList.add("dragOver"),"carrier"===s?(l=e.target.nextElementSibling,l.classList.add("dragOver"),o=l.nextElementSibling,o.classList.add("dragOver"),c=o.nextElementSibling,c.classList.add("dragOver"),d=c.nextElementSibling,d.classList.add("dragOver")):"battleship"===s?(l=e.target.nextElementSibling,l.classList.add("dragOver"),o=l.nextElementSibling,o.classList.add("dragOver"),c=o.nextElementSibling,c.classList.add("dragOver")):"destroyer"===s||"submarine"===s?(l=e.target.nextElementSibling,l.classList.add("dragOver"),o=l.nextElementSibling,o.classList.add("dragOver")):"patrol"===s&&(l=e.target.nextElementSibling,l.classList.add("dragOver"))}function A(e){[...e.target.parentElement.children].forEach((e=>e.classList.remove("dragOver")))}function m(e){const t=document.getElementsByClassName("dragOver");h.pub("shipPlaced",t),[...e.target.parentElement.children].forEach((e=>e.classList.remove("dragOver")));const n=e.dataTransfer.getData("image"),a=document.getElementById(n);e.target.appendChild(a),a.classList.remove("hide")}function v(e){let t=e.target.dataset.x,n=e.target.dataset.y;h.pub("missileLaunched",[t,n,e.target]),e.target.removeEventListener("click",v)}document.getElementsByClassName("dragOver"),e.addEventListener("click",(function(){e.style.display="none",h.pub("newGame")})),i.addEventListener("click",(function(){r.firstChild.classList.toggle("vertical"),r.firstChild.firstChild.classList.toggle("rotate"),h.pub("rotateShip",r.firstChild.firstChild.id)})),h.sub("gameCreated",(function(i){e.style.display="none",a.style.display="flex",function(e){for(let n=0;n<10;n++)e.fleet.grid[n].forEach(((e,a)=>{let r=document.createElement("div");r.className="cell",r.dataset.x=n,r.dataset.y=a,r.dataset.value=e,r.addEventListener("dragenter",f),r.addEventListener("dragover",g),r.addEventListener("dragleave",A),r.addEventListener("drop",m),t.appendChild(r)}))}(i.p1),function(e){for(let t=0;t<10;t++)e.fleet.grid[t].forEach(((e,a)=>{let r=document.createElement("div");r.className="cell",r.dataset.x=t,r.dataset.y=a,r.dataset.value=e,n.appendChild(r),r.addEventListener("click",v)}))}(i.p2),function(e){const t=[b,y,E,C,x];let n=0;e.fleet.allShips.forEach((e=>{const a=document.createElement("div");a.id=e.name+"Container";const i=new Image;i.src=t[n],i.id=e.name,i.className="ship",i.draggable=!0,i.addEventListener("dragstart",u),i.addEventListener("dragend",p),a.appendChild(i),r.appendChild(a),n++}))}(i.p1)})),h.sub("missileStrike",(function(e){e[0].dataset.value=e[1]}))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,